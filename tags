!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASSERT	kernel/debug.h	14;"	d
ASSERT	kernel/debug.h	16;"	d
BITMAP_MASK	lib/bitmap.h	4;"	d
CODE_DESC	boot/loader.S	/^   CODE_DESC:  dd    0x0000FFFF $/;"	d
COUNTER0_MODE	device/timer.c	10;"	d	file:
COUNTER0_NO	device/timer.c	9;"	d	file:
COUNTER0_PORT	device/timer.c	8;"	d	file:
COUNTER0_VALUE	device/timer.c	7;"	d	file:
DATA_STACK_DESC	boot/loader.S	/^   DATA_STACK_DESC:  dd    0x0000FFFF$/;"	d
EFLAGS_IF	kernel/interrupt.c	7;"	d	file:
GDT_BASE	boot/loader.S	/^   GDT_BASE:   dd    0x00000000 $/;"	d
GDT_LIMIT	boot/loader.S	/^   GDT_LIMIT   equ   GDT_SIZE -	1 $/;"	d
GDT_SIZE	boot/loader.S	/^   GDT_SIZE   equ   $ - GDT_BASE$/;"	d
GET_EFLAGS	kernel/interrupt.c	9;"	d	file:
IDT_DESC_16_TYPE	kernel/global.h	23;"	d
IDT_DESC_32_TYPE	kernel/global.h	22;"	d
IDT_DESC_ATTR_DPL0	kernel/global.h	24;"	d
IDT_DESC_ATTR_DPL3	kernel/global.h	25;"	d
IDT_DESC_CNT	kernel/interrupt.c	16;"	d	file:
IDT_DESC_DPL0	kernel/global.h	20;"	d
IDT_DESC_DPL3	kernel/global.h	21;"	d
IDT_DESC_P	kernel/global.h	19;"	d
INPUT_FREQUENCY	device/timer.c	6;"	d	file:
INTR_OFF	kernel/interrupt.h	/^	INTR_OFF,$/;"	e	enum:intr_status
INTR_ON	kernel/interrupt.h	/^	INTR_ON$/;"	e	enum:intr_status
IRQ0_FREQUENCY	device/timer.c	5;"	d	file:
K_HEAP_START	kernel/memory.c	22;"	d	file:
MEM_BITMAP_BASE	kernel/memory.c	15;"	d	file:
NULL	kernel/global.h	27;"	d
PANIC	kernel/debug.h	11;"	d
PDE_IDX	kernel/memory.c	18;"	d	file:
PF_KERNEL	kernel/memory.h	/^   PF_KERNEL = 1,    \/\/ 内核内存池$/;"	e	enum:pool_flags
PF_USER	kernel/memory.h	/^   PF_USER = 2	     \/\/ 用户内存池$/;"	e	enum:pool_flags
PG_P_0	kernel/memory.h	13;"	d
PG_P_1	kernel/memory.h	12;"	d
PG_RW_R	kernel/memory.h	14;"	d
PG_RW_W	kernel/memory.h	15;"	d
PG_SIZE	kernel/memory.c	9;"	d	file:
PG_SIZE	thread/thread.c	16;"	d	file:
PG_US_S	kernel/memory.h	16;"	d
PG_US_U	kernel/memory.h	17;"	d
PIC_M_CTRL	kernel/interrupt.c	11;"	d	file:
PIC_M_DATA	kernel/interrupt.c	12;"	d	file:
PIC_S_CTRL	kernel/interrupt.c	13;"	d	file:
PIC_S_DATA	kernel/interrupt.c	14;"	d	file:
PIT_CONTROL_PORT	device/timer.c	12;"	d	file:
PTE_IDX	kernel/memory.c	19;"	d	file:
READ_WRITE_LATCH	device/timer.c	11;"	d	file:
RPL0	kernel/global.h	5;"	d
RPL0	lib/print.S	/^RPL0  equ   0$/;"	d
RPL1	kernel/global.h	6;"	d
RPL2	kernel/global.h	7;"	d
RPL3	kernel/global.h	8;"	d
SECTION	boot/mbr.S	/^SECTION MBR vstart=0x7c00         $/;"	l
SELECTOR_CODE	boot/loader.S	/^   SELECTOR_CODE equ (0x0001<<3) + TI_GDT + RPL0         ; 相当于(CODE_DESC - GDT_BASE)\/8 + TI_GDT + RPL0$/;"	d
SELECTOR_DATA	boot/loader.S	/^   SELECTOR_DATA equ (0x0002<<3) + TI_GDT + RPL0	 ; 同上$/;"	d
SELECTOR_K_CODE	kernel/global.h	13;"	d
SELECTOR_K_DATA	kernel/global.h	14;"	d
SELECTOR_K_GS	kernel/global.h	16;"	d
SELECTOR_K_STACK	kernel/global.h	15;"	d
SELECTOR_VIDEO	boot/loader.S	/^   SELECTOR_VIDEO equ (0x0003<<3) + TI_GDT + RPL0	 ; 同上 $/;"	d
SELECTOR_VIDEO	lib/print.S	/^SELECTOR_VIDEO equ (0x0003<<3) + TI_GDT + RPL0$/;"	d
TASK_BLOCKED	thread/thread.h	/^	TASK_BLOCKED,$/;"	e	enum:task_status
TASK_DIELD	thread/thread.h	/^	TASK_DIELD$/;"	e	enum:task_status
TASK_HANGING	thread/thread.h	/^	TASK_HANGING,$/;"	e	enum:task_status
TASK_READY	thread/thread.h	/^	TASK_READY,$/;"	e	enum:task_status
TASK_RUNNING	thread/thread.h	/^	TASK_RUNNING,$/;"	e	enum:task_status
TASK_WAITING	thread/thread.h	/^	TASK_WAITING,$/;"	e	enum:task_status
TI_GDT	kernel/global.h	10;"	d
TI_GDT	lib/print.S	/^TI_GDT equ  0$/;"	d
TI_LDT	kernel/global.h	11;"	d
VECTOR	kernel/kernel.S	/^VECTOR 0x00,ZERO$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x01,ZERO$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x02,ZERO$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x03,ZERO $/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x04,ZERO$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x05,ZERO$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x06,ZERO$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x07,ZERO $/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x08,ERROR_CODE$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x09,ZERO$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x0a,ERROR_CODE$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x0b,ERROR_CODE $/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x0c,ZERO$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x0d,ERROR_CODE$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x0e,ERROR_CODE$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x0f,ZERO $/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x10,ZERO$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x11,ERROR_CODE$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x12,ZERO$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x13,ZERO $/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x14,ZERO$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x15,ZERO$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x16,ZERO$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x17,ZERO $/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x18,ERROR_CODE$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x19,ZERO$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x1a,ERROR_CODE$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x1b,ERROR_CODE $/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x1c,ZERO$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x1d,ERROR_CODE$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x1e,ERROR_CODE$/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x1f,ZERO $/;"	l
VECTOR	kernel/kernel.S	/^VECTOR 0x20,ZERO$/;"	l
VIDEO_DESC	boot/loader.S	/^   VIDEO_DESC: dd    0x80000007	       ; limit=(0xbffff-0xb8000)\/4k=0x7$/;"	d
_LIB_STDINT_H	lib/stdint.h	2;"	d
__DEVICE_TIMER_H	device/timer.h	2;"	d
__KERNEL_DEBUG_H	kernel/debug.h	2;"	d
__KERNEL_GLOBAL_H	kernel/global.h	2;"	d
__KERNEL_INIT_H	kernel/init.h	2;"	d
__KERNEL_INTERRUPT_H	kernel/interrupt.h	2;"	d
__KERNEL_MEMORY_H	kernel/memory.h	2;"	d
__LIB_IO_H	lib/kernel/io.h	3;"	d
__LIB_KERNEL_BITMAP_H	lib/bitmap.h	2;"	d
__LIB_KERNEL_PRINT_H	lib/print.h	2;"	d
__LIB_STRING_H	lib/string.h	2;"	d
__THREAD_THREAD_H	thread/thread.h	2;"	d
ards_nr	boot/loader.S	/^   ards_nr dw 0		      ;用于记录ards结构体数量$/;"	d
attribute	kernel/interrupt.c	/^   uint8_t     attribute;$/;"	m	struct:gate_desc	file:
bitmap	lib/bitmap.h	/^struct bitmap {$/;"	s
bitmap_init	lib/bitmap.c	/^void bitmap_init(struct bitmap* btmp) {$/;"	f
bitmap_scan	lib/bitmap.c	/^int bitmap_scan(struct bitmap* btmp, uint32_t cnt) {$/;"	f
bitmap_scan_test	lib/bitmap.c	/^bool bitmap_scan_test(struct bitmap* btmp, uint32_t bit_idx) {$/;"	f
bitmap_set	lib/bitmap.c	/^void bitmap_set(struct bitmap* btmp, uint32_t bit_idx, int8_t value) {$/;"	f
bits	lib/bitmap.h	/^   uint8_t* bits;$/;"	m	struct:bitmap
bool	kernel/global.h	28;"	d
btmp_bytes_len	lib/bitmap.h	/^   uint32_t btmp_bytes_len;$/;"	m	struct:bitmap
cs	thread/thread.h	/^	uint32_t cs;$/;"	m	struct:intr_stack
dcount	kernel/interrupt.c	/^   uint8_t     dcount;   \/\/此项为双字计数字段，是门描述符中的第4字节。此项固定值，不用考虑$/;"	m	struct:gate_desc	file:
ds	thread/thread.h	/^	uint32_t ds;$/;"	m	struct:intr_stack
eax	thread/thread.h	/^	uint32_t eax;$/;"	m	struct:intr_stack
ebp	thread/thread.h	/^	uint32_t ebp;$/;"	m	struct:intr_stack
ebp	thread/thread.h	/^	uint32_t ebp;$/;"	m	struct:thread_stack
ebx	thread/thread.h	/^	uint32_t ebx;$/;"	m	struct:intr_stack
ebx	thread/thread.h	/^	uint32_t ebx;$/;"	m	struct:thread_stack
ecx	thread/thread.h	/^	uint32_t ecx;$/;"	m	struct:intr_stack
edi	thread/thread.h	/^	uint32_t edi;$/;"	m	struct:intr_stack
edi	thread/thread.h	/^	uint32_t edi;$/;"	m	struct:thread_stack
edx	thread/thread.h	/^	uint32_t edx;$/;"	m	struct:intr_stack
eflags	thread/thread.h	/^	uint32_t eflags;$/;"	m	struct:intr_stack
eip	thread/thread.h	/^	void (*eip) (thread_func *func, void* func_arg);$/;"	m	struct:thread_stack
eip	thread/thread.h	/^	void (*eip) (void);$/;"	m	struct:intr_stack
enter_kernel	boot/loader.S	/^enter_kernel:    $/;"	l
err_code	thread/thread.h	/^	uint32_t err_code;$/;"	m	struct:intr_stack
es	thread/thread.h	/^	uint32_t es;$/;"	m	struct:intr_stack
esi	thread/thread.h	/^	uint32_t esi;$/;"	m	struct:intr_stack
esi	thread/thread.h	/^	uint32_t esi;$/;"	m	struct:thread_stack
esp	thread/thread.h	/^	void* esp;$/;"	m	struct:intr_stack
esp_dummy	thread/thread.h	/^	uint32_t esp_dummy;$/;"	m	struct:intr_stack
exception_init	kernel/interrupt.c	/^static void exception_init(void) {			    \/\/ 完成一般中断处理函数注册及异常名称注册$/;"	f	file:
extern	kernel/kernel.S	/^extern idt_table		 ;声明interupt中定义的idt_table$/;"	l
extern	kernel/kernel.S	/^extern put_str			 ;声明外部函数$/;"	l
false	kernel/global.h	30;"	d
frequency_set	device/timer.c	/^static void frequency_set(uint8_t counter_port,$/;"	f	file:
fs	thread/thread.h	/^	uint32_t fs;$/;"	m	struct:intr_stack
func_arg	thread/thread.h	/^	void *func_arg;$/;"	m	struct:thread_stack
func_offset_high_word	kernel/interrupt.c	/^   uint16_t    func_offset_high_word;$/;"	m	struct:gate_desc	file:
func_offset_low_word	kernel/interrupt.c	/^   uint16_t    func_offset_low_word;$/;"	m	struct:gate_desc	file:
function	thread/thread.h	/^	thread_func* function;			\/\/function 是几级指针？$/;"	m	struct:thread_stack
gate_desc	kernel/interrupt.c	/^struct gate_desc {$/;"	s	file:
gdt_ptr	boot/loader.S	/^   gdt_ptr  dw  GDT_LIMIT $/;"	d
general_intr_handler	kernel/interrupt.c	/^static void general_intr_handler(uint8_t vec_nr) {$/;"	f	file:
get_kernel_pages	kernel/memory.c	/^void* get_kernel_pages(uint32_t pg_cnt) {$/;"	f
global	kernel/kernel.S	/^global intr_entry_table$/;"	l
global	kernel/kernel.S	/^global intr_exit$/;"	l
global	lib/print.S	/^global put_char$/;"	l
global	lib/print.S	/^global put_int$/;"	l
global	lib/print.S	/^global put_str$/;"	l
gs	thread/thread.h	/^	uint32_t gs;$/;"	m	struct:intr_stack
idt	kernel/interrupt.c	/^static struct gate_desc idt[IDT_DESC_CNT];   \/\/ idt是中断描述符表,本质上就是个中断门描述符数组$/;"	v	typeref:struct:gate_desc	file:
idt_desc_init	kernel/interrupt.c	/^static void idt_desc_init(void) {$/;"	f	file:
idt_init	kernel/interrupt.c	/^void idt_init() {$/;"	f
idt_table	kernel/interrupt.c	/^intr_handler idt_table[IDT_DESC_CNT];	     \/\/ 定义中断处理程序数组.在kernel.S中定义的intrXXentry只是中断处理程序的入口,最终调用的是ide_table中的处理程序$/;"	v
inb	lib/kernel/io.h	/^static inline uint8_t inb(uint16_t port)$/;"	f
init_all	kernel/init.c	/^void init_all()$/;"	f
init_thread	thread/thread.c	/^void init_thread(struct task_struct* pthread,char* name,int prio)$/;"	f
insw	lib/kernel/io.h	/^static inline void insw(uint16_t port,void* addr,uint32_t word_cnt)$/;"	f
int16_t	lib/stdint.h	/^typedef signed short			int16_t;$/;"	t
int32_t	lib/stdint.h	/^typedef signed int				int32_t;$/;"	t
int64_t	lib/stdint.h	/^typedef signed long long int	int64_t;$/;"	t
int8_t	lib/stdint.h	/^typedef signed char				int8_t;$/;"	t
intr_disable	kernel/interrupt.c	/^enum intr_status intr_disable()$/;"	f
intr_enable	kernel/interrupt.c	/^enum intr_status intr_enable()				\/\/开中断，并返回开中断之前的状态$/;"	f
intr_entry_table	kernel/kernel.S	/^intr_entry_table:$/;"	l
intr_exit	kernel/kernel.S	/^intr_exit:$/;"	l
intr_get_status	kernel/interrupt.c	/^enum intr_status intr_get_status()$/;"	f
intr_handler	kernel/interrupt.h	/^typedef void *intr_handler;$/;"	t
intr_name	kernel/interrupt.c	/^char* intr_name[IDT_DESC_CNT];		     \/\/ 用于保存异常的名字$/;"	v
intr_set_status	kernel/interrupt.c	/^enum intr_status intr_set_status(enum intr_status status)$/;"	f
intr_stack	thread/thread.h	/^struct intr_stack$/;"	s
intr_status	kernel/interrupt.h	/^enum intr_status$/;"	g
k_thread_a	kernel/main.c	/^void k_thread_a(void *arg)$/;"	f
kernel_init	boot/loader.S	/^kernel_init:$/;"	l
kernel_pool	kernel/memory.c	/^struct pool kernel_pool, user_pool;      \/\/ 生成内核内存池和用户内存池$/;"	v	typeref:struct:pool
kernel_thread	thread/thread.c	/^static void kernel_thread (thread_func* function, void* func_arg)$/;"	f	file:
kernel_vaddr	kernel/memory.c	/^struct virtual_addr kernel_vaddr;	 \/\/ 此结构是用来给内核分配虚拟地址$/;"	v	typeref:struct:virtual_addr
loader_start	boot/loader.S	/^   loader_start:$/;"	l
main	kernel/main.c	/^void main(void)$/;"	f
make_idt_desc	kernel/interrupt.c	/^static void make_idt_desc(struct gate_desc* p_gdesc, uint8_t attr, intr_handler function) { $/;"	f	file:
malloc_page	kernel/memory.c	/^void* malloc_page(enum pool_flags pf, uint32_t pg_cnt) {$/;"	f
mem_cpy	boot/loader.S	/^mem_cpy:		      $/;"	l
mem_init	kernel/memory.c	/^void mem_init() {$/;"	f
mem_pool_init	kernel/memory.c	/^static void mem_pool_init(uint32_t all_mem) {$/;"	f	file:
memcmp	lib/string.c	/^int memcmp(const void* a_, const void* b_, uint32_t size) {$/;"	f
memcpy	lib/string.c	/^void memcpy(void* dst_, const void* src_, uint32_t size) {$/;"	f
memset	lib/string.c	/^void memset(void* dst_, uint8_t value, uint32_t size) {$/;"	f
mul	boot/loader.S	/^      mul dx$/;"	d
mul	boot/mbr.S	/^      mul dx$/;"	d
name	thread/thread.h	/^	char name[16];$/;"	m	struct:task_struct
outb	lib/kernel/io.h	/^static inline void outb(uint16_t port,uint8_t data)$/;"	f
outsw	lib/kernel/io.h	/^static inline void outsw(uint16_t port, const void* addr,uint32_t word_cnt)$/;"	f
p_mode_start	boot/loader.S	/^p_mode_start:$/;"	l
page_table_add	kernel/memory.c	/^static void page_table_add(void* _vaddr, void* _page_phyaddr) {$/;"	f	file:
palloc	kernel/memory.c	/^static void* palloc(struct pool* m_pool) {$/;"	f	file:
panic_spin	kernel/debug.c	/^void panic_spin(char *filename, int line, const char* func, const char* condition)$/;"	f
pde_ptr	kernel/memory.c	/^uint32_t* pde_ptr(uint32_t vaddr) {$/;"	f
phy_addr_start	kernel/memory.c	/^   uint32_t phy_addr_start;	 \/\/ 本内存池所管理物理内存的起始地址$/;"	m	struct:pool	file:
pic_init	kernel/interrupt.c	/^static void pic_init(void) {$/;"	f	file:
pool	kernel/memory.c	/^struct pool {$/;"	s	file:
pool_bitmap	kernel/memory.c	/^   struct bitmap pool_bitmap;	 \/\/ 本内存池用到的位图结构,用于管理物理内存$/;"	m	struct:pool	typeref:struct:pool::bitmap	file:
pool_flags	kernel/memory.h	/^enum pool_flags {$/;"	g
pool_size	kernel/memory.c	/^   uint32_t pool_size;		 \/\/ 本内存池字节容量$/;"	m	struct:pool	file:
pop	kernel/kernel.S	/^	pop ds$/;"	d
priority	thread/thread.h	/^	uint8_t priority;				\/\/优先级$/;"	m	struct:task_struct
pte_ptr	kernel/memory.c	/^uint32_t* pte_ptr(uint32_t vaddr) {$/;"	f
push	kernel/kernel.S	/^	push ds$/;"	d
put_char	lib/print.S	/^put_char:$/;"	l
put_int	lib/print.S	/^put_int:$/;"	l
put_int_buffer	lib/print.S	/^put_int_buffer    dq    0     ; 定义8字节缓冲区用于数字到字符的转换$/;"	d
put_str	lib/print.S	/^put_str:$/;"	l
rd_disk_m_16	boot/mbr.S	/^rd_disk_m_16:	   $/;"	l
rd_disk_m_32	boot/loader.S	/^rd_disk_m_32:	   $/;"	l
section	kernel/kernel.S	/^section .data$/;"	l
section	kernel/kernel.S	/^section .text$/;"	l
section	lib/print.S	/^section .data$/;"	l
section	lib/print.S	/^section .text$/;"	l
selector	kernel/interrupt.c	/^   uint16_t    selector;$/;"	m	struct:gate_desc	file:
self_kstack	thread/thread.h	/^	uint32_t *self_kstack;$/;"	m	struct:task_struct
setup_page	boot/loader.S	/^setup_page:$/;"	l
ss	thread/thread.h	/^	uint32_t ss;$/;"	m	struct:intr_stack
stack_magic	thread/thread.h	/^	uint32_t stack_magic;			\/\/栈的边界标记，检测栈的溢出$/;"	m	struct:task_struct
status	thread/thread.h	/^	enum task_status status;$/;"	m	struct:task_struct	typeref:enum:task_struct::task_status
strcat	lib/string.c	/^char* strcat(char* dst_, const char* src_) {$/;"	f
strchr	lib/string.c	/^char* strchr(const char* str, const uint8_t ch) {$/;"	f
strchrs	lib/string.c	/^uint32_t strchrs(const char* str, uint8_t ch) {$/;"	f
strcmp	lib/string.c	/^int8_t strcmp (const char* a, const char* b) {$/;"	f
strcpy	lib/string.c	/^char* strcpy(char* dst_, const char* src_) {$/;"	f
strlen	lib/string.c	/^uint32_t strlen(const char* str) {$/;"	f
strrchr	lib/string.c	/^char* strrchr(const char* str, const uint8_t ch) {$/;"	f
task_status	thread/thread.h	/^enum task_status$/;"	g
task_struct	thread/thread.h	/^struct task_struct$/;"	s
thread_create	thread/thread.c	/^void thread_create(struct task_struct* pthread, thread_func function, void* func_arg)$/;"	f
thread_func	thread/thread.h	/^typedef void thread_func(void *);$/;"	t
thread_stack	thread/thread.h	/^struct thread_stack$/;"	s
thread_start	thread/thread.c	/^struct task_struct*  thread_start(char* name,int prio, thread_func function,void* func_arg)$/;"	f
timer_init	device/timer.c	/^void timer_init()$/;"	f
total_mem_bytes	boot/loader.S	/^   total_mem_bytes dd 0					 $/;"	d
true	kernel/global.h	29;"	d
uint16_t	lib/stdint.h	/^typedef unsigned short			uint16_t;$/;"	t
uint32_t	lib/stdint.h	/^typedef unsigned int			uint32_t;$/;"	t
uint64_t	lib/stdint.h	/^typedef unsigned long long int	uint64_t;$/;"	t
uint8_t	lib/stdint.h	/^typedef unsigned char			uint8_t;$/;"	t
unused_retaddr	thread/thread.h	/^	void (*unused_retaddr);$/;"	m	struct:thread_stack
user_pool	kernel/memory.c	/^struct pool kernel_pool, user_pool;      \/\/ 生成内核内存池和用户内存池$/;"	v	typeref:struct:
vaddr_bitmap	kernel/memory.h	/^   struct bitmap vaddr_bitmap;$/;"	m	struct:virtual_addr	typeref:struct:virtual_addr::bitmap
vaddr_get	kernel/memory.c	/^static void* vaddr_get(enum pool_flags pf, uint32_t pg_cnt) {$/;"	f	file:
vaddr_start	kernel/memory.h	/^   uint32_t vaddr_start;$/;"	m	struct:virtual_addr
vec_no	thread/thread.h	/^	uint32_t vec_no;$/;"	m	struct:intr_stack
virtual_addr	kernel/memory.h	/^struct virtual_addr {$/;"	s
